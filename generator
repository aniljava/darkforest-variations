#!/usr/bin/env python2

import os
import sys
import gomill.sgf
import gomill.boards
import threading
import subprocess

VARIATION_DEPTH = 20
CHARS = 'ABCDEFGHJKLMNOPQRST'


def main():

    if len(sys.argv) < 3:
        print 'USAGE'
        print 'generator <source_sgf> <dest_sgf>'

    source_sgf = sys.argv[1]
    dest_sgf = sys.argv[2]

    dark_forest = subprocess.Popen(
        './darkforest-gtp',         # Shell script that starts the GTP instance
        stdout=subprocess.PIPE,
        stdin=subprocess.PIPE,
        stderr=subprocess.PIPE
    )

    writer = dark_forest.stdin
    reader = dark_forest.stdout

    u = threading.Thread(target=devnull, args=(dark_forest.stderr, dark_forest))
    # u.start() # Uncomment to use STDERR for debug

    writer.write('clear_board\n\n')
    read_response(reader)

    text = open(source_sgf).read()
    source = gomill.sgf.Sgf_game.from_string(text)
    root_node = source.get_root()

    game = gomill.sgf.Sgf_game(19)
    target = game.extend_main_sequence()

    move_no = 0
    for node in source.get_main_sequence():
        move = node.get_move()
        color, pos = move
        if pos is None:
            continue  # ROOT NODE
        y, x = pos
        translated = '{}{}'.format(CHARS[x], y + 1)

        if move_no < 8:
            command = 'play {} {}\n\n'.format(color, translated)
            writer.write(command)
            read_response(reader, lines=4)
            target.set_move(color, (y, x))  # Extend main sequence

        else:
            command = 'genmove {}\n\n'.format(color)
            writer.write(command)
            result = read_response(reader, lines=5)
            result = result.split('= ')[1]
            y_1, x_1 = alfa_to_num(result)

            if (y, x) == (y_1, x_1):
                target.set_move(color, (y, x))  # Is a match, no variation required
            else:

                main = target.new_child()
                side = target.new_child()
                main.set_move(color, (y, x))  # Is a match, no variation required
                side.set_move(color, (y_1, x_1))  # Is a match, no variation required

                # SELF PLAY VARIATION
                last_color = color
                for x in range(VARIATION_DEPTH - 1):
                    if last_color == 'b':
                        last_color = 'w'
                    else:
                        last_color = 'b'

                    command = 'genmove {}\n\n'.format(last_color)
                    writer.write(command)
                    result = read_response(reader, lines=5)
                    result = result.split('= ')[1]
                    y_1, x_1 = alfa_to_num(result)
                    side = side.new_child()
                    side.set_move(last_color, (y_1, x_1))  # Is a match, no variation required

                for x in range(VARIATION_DEPTH):
                    # UNDO THE GENMOVE
                    command = 'undo\n\n'
                    writer.write(command)
                    read_response(reader, lines=5)

                # PLAY THE ACTUAL MOVE
                command = 'play {} {}\n\n'.format(color, translated)
                writer.write(command)
                read_response(reader, lines=4)

        print 'MOVE {} : {}, {}, {}'.format(move_no, color, x, y)
        sgf_text = game.serialise()
        target = game.extend_main_sequence()
        open(dest_sgf, 'w').write(sgf_text)
        move_no += 1

    global alive
    alive = False # Stop the std err reader


def alfa_to_num(alfa):
    y = alfa[0]
    x = alfa[1:]
    y = CHARS.index(y)
    return int(x) - 1, int(y)


def read_response(reader, lines=4):
    response = ''

    for x in range(lines + 1):
        line = reader.readline()
        # print x, line
        if response == '' and line.strip() != '':
            response = line

    return response.strip()


alive = True
def devnull(stream, process):
    global alive
    while process.poll() is None and alive :
        stream.read(1)
main()
